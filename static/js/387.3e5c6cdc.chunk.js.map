{"version":3,"file":"static/js/387.3e5c6cdc.chunk.js","mappings":"4LAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACE,6NAEK,IAAMC,EAAb,6CACEC,OAAS,CACPC,OAAQ,CACNC,MAAO,GACPC,KAAM,GAJZ,iDAQE,SAAkBC,GAChBC,KAAKL,OAAOC,OAAOC,MAAQE,EAC3BC,KAAKL,OAAOC,OAAOE,KAAO,CAC3B,GAXH,yBAaE,WAAe,IAAD,OACZ,OAAOL,EAAAA,EAAAA,GAAM,qBAAsBO,KAAKL,QAAQM,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAEtD,OADA,EAAKP,OAAOC,OAAOE,MAAQ,EACpBI,CACR,GACF,GAlBH,0BAoBE,WAAgB,IAAD,OACb,OAAOT,EAAAA,EAAAA,GAAM,eAAgBO,KAAKL,QAAQM,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAEhD,OADA,EAAKP,OAAOC,OAAOE,MAAQ,EACpBI,CACR,GACF,GAzBH,6BA2BE,SAAgBC,GACd,OAAOV,EAAAA,EAAAA,GAAM,SAAD,OAAUU,IAAWF,MAAK,qBAAGC,IAAH,GACvC,GA7BH,6BA+BE,SAAgBC,GACd,OAAOV,EAAAA,EAAAA,GAAM,SAAD,OAAUU,EAAV,aAA6BF,MAAK,qBAAGC,IAAH,GAC/C,GAjCH,6BAmCE,SAAgBC,GACd,OAAOV,EAAAA,EAAAA,GAAM,SAAD,OAAUU,EAAV,aAA6BF,MAAK,qBAAGC,IAAH,GAC/C,GArCH,uBAuCE,SAAUN,GACRI,KAAKL,OAAOC,QAAZ,kBACKI,KAAKL,OAAOC,QACZA,EAEN,GA5CH,uBA8CE,SAAUD,GACR,IAAK,IAAMS,KAAOT,EAChBK,KAAKL,OAAOS,IAAZ,kBAAwBJ,KAAKL,OAAOS,IAAST,EAAOS,GAEvD,KAlDH,I,0ICJaC,EAAWC,EAAAA,GAAAA,GAAH,kHAMRC,EAAWD,EAAAA,GAAAA,GAAH,mD,2BCHfE,EAAW,IAAId,EAAAA,EAIN,SAASe,IACpB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAeR,OAbAa,EAAAA,EAAAA,YAAU,WAAM,wCACZ,6GAE2BR,EAASS,gBAAgBd,GAFpD,OAEce,EAFd,OAGQN,EAAQM,EAAKP,MAHrB,gDAKQG,EAAS,EAAD,IALhB,0DADY,uBAAC,WAAD,wBASZK,EAEH,GAAE,CAAChB,KAGF,gCACGQ,EAAKS,OAAS,GACb,SAACf,EAAD,UACGM,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,cAAeC,EAAjC,EAAiCA,aAAjC,OACR,UAAClB,EAAD,YACE,gBAAKmB,UAAU,QAAf,UACE,gBAAKC,IA5BN,kCA4BsBF,EAAcG,IAAI,YAErC,wBAAML,KACN,uBAAKC,MALIF,EADP,MAUV,MACHT,IAAS,2DAGjB,C","sources":["APIs/MovieAPI.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI0YjQyODlmMDBlMjE1NTE5MjQzODVjOTFkNGIwMTEzZSIsInN1YiI6IjY1MmJmMGM5MGNiMzM1MTZmNzQ3YzkzOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.VA4_81qNBPKQAKwMfUNWZXjuauQkEzVz0KQ7-yzUX58';\n\nexport class MovieAPI {\n  config = {\n    params: {\n      query: '',\n      page: 1,\n    },\n  };\n\n  setSearchQuestion(q) {\n    this.config.params.query = q;\n    this.config.params.page = 1;\n  }\n\n  getTrending() {\n    return axios('trending/movie/day', this.config).then(({ data }) => {\n      this.config.params.page += 1;\n      return data;\n    });\n  }\n\n  searchMovies() {\n    return axios('search/movie', this.config).then(({ data }) => {\n      this.config.params.page += 1;\n      return data;\n    });\n  }\n\n  getMovieDetails(movieId) {\n    return axios(`movie/${movieId}`).then(({ data }) => data);\n  }\n\n  getMovieCredits(movieId) {\n    return axios(`movie/${movieId}/credits`).then(({ data }) => data);\n  }\n\n  getMovieReviews(movieId) {\n    return axios(`movie/${movieId}/reviews`).then(({ data }) => data);\n  }\n\n  setParams(params) {\n    this.config.params = {\n      ...this.config.params,\n      ...params,\n    };\n  }\n\n  setConfig(config) {\n    for (const key in config) {\n      this.config[key] = { ...this.config[key], ...config[key] };\n    }\n  }\n}","import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\ndisplay: grid;\ngrid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\ngap: 8px;\n`\n\nexport const CastItem = styled.li`\ndisplay: grid;\ngap: 4px;\n`","import { MovieAPI } from \"APIs/MovieAPI\";\nimport { CastItem, CastList } from \"./Cast.styled\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\n\nconst movieAPI = new MovieAPI();\nconst BASE_URL = 'https://image.tmdb.org/t/p/w400';\n\n\nexport default function Cast() {\n    const [cast, setCast] = useState([]);\n    const [error, setError] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const resp = await movieAPI.getMovieCredits(movieId);\n                setCast(resp.cast)\n            } catch (err) {\n                setError(err)\n            }\n        }\n        fetchData()\n\n    }, [movieId])\n    \n    return (\n      <>\n        {cast.length > 0 ? (\n          <CastList>\n            {cast.map(({ id, character, original_name, profile_path }) => (\n              <CastItem key={id}>\n                <div className=\"thumb\">\n                  <img src={BASE_URL + profile_path} alt=\"Foto\" />\n                    </div>\n                    <h4>{ character}</h4>\n                    <p>{ original_name}</p>\n              </CastItem>\n            ))}\n          </CastList>\n        ) : 'N/A'}\n        {error && <h1>Oooops... Please reload page</h1>}\n      </>\n    );\n}"],"names":["axios","MovieAPI","config","params","query","page","q","this","then","data","movieId","key","CastList","styled","CastItem","movieAPI","Cast","useState","cast","setCast","error","setError","useParams","useEffect","getMovieCredits","resp","fetchData","length","map","id","character","original_name","profile_path","className","src","alt"],"sourceRoot":""}